{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# # lab 8\n",
    "#  Code of \"Min Max Algorithm\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def minimax(state, depth, is_maximizing, evaluate, get_children):\n",
    "   \n",
    "    if depth == 0 or not get_children(state):\n",
    "        return evaluate(state), None\n",
    "\n",
    "    best_move = None\n",
    "\n",
    "    if is_maximizing:\n",
    "        max_eval = float('-inf')\n",
    "        for child, move in get_children(state):\n",
    "            eval_score, _ = minimax(child, depth - 1, False, evaluate, get_children)\n",
    "            if eval_score > max_eval:\n",
    "                max_eval, best_move = eval_score, move\n",
    "        return max_eval, best_move\n",
    "    else:\n",
    "        min_eval = float('inf')\n",
    "        for child, move in get_children(state):\n",
    "            eval_score, _ = minimax(child, depth - 1, True, evaluate, get_children)\n",
    "            if eval_score < min_eval:\n",
    "                min_eval, best_move = eval_score, move\n",
    "        return min_eval, best_move\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimal Score: 5, Optimal Move: 9\n"
     ]
    }
   ],
   "source": [
    "def evaluate(state):\n",
    "\n",
    "    return state[\"player1_score\"] - state[\"player2_score\"]\n",
    "\n",
    "def get_children(state):\n",
    "    \n",
    "    children = []\n",
    "    for i, num in enumerate(state[\"numbers\"]):\n",
    "        next_numbers = state[\"numbers\"][:i] + state[\"numbers\"][i+1:]\n",
    "        next_state = {\n",
    "            \"numbers\": next_numbers,\n",
    "            \"player1_score\": state[\"player1_score\"] + (num if state[\"is_player1_turn\"] else 0),\n",
    "            \"player2_score\": state[\"player2_score\"] + (num if not state[\"is_player1_turn\"] else 0),\n",
    "            \"is_player1_turn\": not state[\"is_player1_turn\"],\n",
    "        }\n",
    "        children.append((next_state, num))\n",
    "    return children\n",
    "\n",
    "initial_state = {\n",
    "    \"numbers\": [3, 5, 2, 9],  \n",
    "    \"player1_score\": 0,\n",
    "    \"player2_score\": 0,\n",
    "    \"is_player1_turn\": True,\n",
    "}\n",
    "\n",
    "optimal_score, optimal_move = minimax(initial_state, depth=len(initial_state[\"numbers\"]), \n",
    "                                      is_maximizing=True, evaluate=evaluate, get_children=get_children)\n",
    "print(f\"Optimal Score: {optimal_score}, Optimal Move: {optimal_move}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
