{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Lab 7 Task\n",
    "# Task 1: Code of A* Algorithm (without importing any library)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "path found: A->B->D->E->F\n"
     ]
    }
   ],
   "source": [
    "class node:\n",
    "    def __init__(self, value,x ,y):\n",
    "        self.value = value\n",
    "        self.x = x\n",
    "        self.y = y\n",
    "        self.neighbours = []\n",
    "        self.g = float('inf')\n",
    "        self.h = 0\n",
    "        self.f = 0\n",
    "        self.parent =None\n",
    "    def add_neighbour(self,node, cost):\n",
    "        self.neighbours.append((node,cost))\n",
    "\n",
    "def heuristic(node,goal):\n",
    "    return abs(node.x - goal.x)+ abs(node.y - goal.y)\n",
    "\n",
    "def astar(start,goal):\n",
    "    open_list = [start]\n",
    "    closed_list = []\n",
    "    start.g = 0\n",
    "    start.h = heuristic(start,goal)\n",
    "    start.f = start.g + start.h\n",
    "    while open_list:\n",
    "        open_list.sort(key=lambda node: node.f)\n",
    "        current_node = open_list.pop(0)\n",
    "        if current_node == goal:\n",
    "            path = []\n",
    "            while current_node:\n",
    "                path.append(current_node.value)\n",
    "                current_node = current_node.parent\n",
    "            return path[::-1]\n",
    "        closed_list.append(current_node)\n",
    "        for neighbour, cost in current_node.neighbours:\n",
    "            if neighbour in closed_list:\n",
    "                continue\n",
    "            tentative_g = current_node.g + cost\n",
    "            if neighbour not in open_list:\n",
    "                open_list.append(neighbour)\n",
    "            if tentative_g < neighbour.g:\n",
    "                neighbour.g = tentative_g\n",
    "                neighbour.h = heuristic(neighbour,goal)\n",
    "                neighbour.f = neighbour.g +neighbour.h\n",
    "                neighbour.parent = current_node \n",
    "    return None\n",
    "if __name__ == \"__main__\":\n",
    "    a = node(\"A\", 0, 0)\n",
    "    b = node(\"B\", 1, 0)\n",
    "    c = node(\"C\", 0, 1)\n",
    "    d = node(\"D\", 1, 1)\n",
    "    e = node(\"E\", 2, 1)\n",
    "    f = node(\"F\", 2, 2)\n",
    "\n",
    "    a.add_neighbour(b, 1)\n",
    "    a.add_neighbour(c, 1)\n",
    "    b.add_neighbour(d, 1)\n",
    "    c.add_neighbour(d, 1)\n",
    "    d.add_neighbour(e, 1)\n",
    "    e.add_neighbour(f, 1)\n",
    "    start = a\n",
    "    goal = f\n",
    "    path = astar(start, goal)\n",
    "    if path:\n",
    "        print(\"path found:\",\"->\".join(path))\n",
    "    else:\n",
    "        print(\"no path found\")    \n",
    "                           \n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
