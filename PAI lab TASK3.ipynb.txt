{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c3a6ebbf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "solution path:\n",
      "Step 1: Fill B\n",
      "Step 2: pour from B to A (3 liters)\n",
      "Step 3: Fill B\n",
      "Step 4: pour from B to A (1 liters)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def water_jug_dfs(x,y,z):\n",
    "    visited = set()\n",
    "    stack = [(0,0,[])]\n",
    "    while stack:\n",
    "        a,b, path = stack.pop()\n",
    "        if a==z or b==z:\n",
    "            print(\"solution path:\")\n",
    "            for step, rule in enumerate(path, 1):\n",
    "                print(f\"Step {step}: {rule}\")\n",
    "            return True\n",
    "        if (a,b) in visited:\n",
    "            continue\n",
    "        visited.add((a,b))\n",
    "        stack.append((x,b,path + [\"Fill A\"]))\n",
    "        stack.append((a,y,path + [\"Fill B\"]))\n",
    "        stack.append((0,b,path + [\"Empty A\"]))\n",
    "        stack.append((a,0,path + [\"Empty B\"]))\n",
    "        pour_amount = min(a, y - b)\n",
    "        stack.append((a- pour_amount, b +pour_amount,path + [\"pour from jug A to Jug B({pour_amount} liters)\"]))\n",
    "        pour_amount = min(b, x - a)\n",
    "        stack.append((a + pour_amount, b -pour_amount, path +[f\"pour from B to A ({pour_amount} liters)\"]))\n",
    "    print(\"No solution exists.\")\n",
    "    return False\n",
    "\n",
    "x = 4\n",
    "y = 3\n",
    "z = 2\n",
    "water_jug_dfs(x,y,z)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a3045e84",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
